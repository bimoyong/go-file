// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/file/file.proto

package go_srv_file

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for File service

func NewFileEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for File service

type FileService interface {
	Upload(ctx context.Context, opts ...client.CallOption) (File_UploadService, error)
	Download(ctx context.Context, in *DownloadReq, opts ...client.CallOption) (File_DownloadService, error)
}

type fileService struct {
	c    client.Client
	name string
}

func NewFileService(name string, c client.Client) FileService {
	return &fileService{
		c:    c,
		name: name,
	}
}

func (c *fileService) Upload(ctx context.Context, opts ...client.CallOption) (File_UploadService, error) {
	req := c.c.NewRequest(c.name, "File.Upload", &UploadReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &fileServiceUpload{stream}, nil
}

type File_UploadService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*UploadReq) error
}

type fileServiceUpload struct {
	stream client.Stream
}

func (x *fileServiceUpload) Close() error {
	return x.stream.Close()
}

func (x *fileServiceUpload) Context() context.Context {
	return x.stream.Context()
}

func (x *fileServiceUpload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fileServiceUpload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fileServiceUpload) Send(m *UploadReq) error {
	return x.stream.Send(m)
}

func (c *fileService) Download(ctx context.Context, in *DownloadReq, opts ...client.CallOption) (File_DownloadService, error) {
	req := c.c.NewRequest(c.name, "File.Download", &DownloadReq{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &fileServiceDownload{stream}, nil
}

type File_DownloadService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*DownloadResp, error)
}

type fileServiceDownload struct {
	stream client.Stream
}

func (x *fileServiceDownload) Close() error {
	return x.stream.Close()
}

func (x *fileServiceDownload) Context() context.Context {
	return x.stream.Context()
}

func (x *fileServiceDownload) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fileServiceDownload) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fileServiceDownload) Recv() (*DownloadResp, error) {
	m := new(DownloadResp)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for File service

type FileHandler interface {
	Upload(context.Context, File_UploadStream) error
	Download(context.Context, *DownloadReq, File_DownloadStream) error
}

func RegisterFileHandler(s server.Server, hdlr FileHandler, opts ...server.HandlerOption) error {
	type file interface {
		Upload(ctx context.Context, stream server.Stream) error
		Download(ctx context.Context, stream server.Stream) error
	}
	type File struct {
		file
	}
	h := &fileHandler{hdlr}
	return s.Handle(s.NewHandler(&File{h}, opts...))
}

type fileHandler struct {
	FileHandler
}

func (h *fileHandler) Upload(ctx context.Context, stream server.Stream) error {
	return h.FileHandler.Upload(ctx, &fileUploadStream{stream})
}

type File_UploadStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*UploadReq, error)
}

type fileUploadStream struct {
	stream server.Stream
}

func (x *fileUploadStream) Close() error {
	return x.stream.Close()
}

func (x *fileUploadStream) Context() context.Context {
	return x.stream.Context()
}

func (x *fileUploadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fileUploadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fileUploadStream) Recv() (*UploadReq, error) {
	m := new(UploadReq)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *fileHandler) Download(ctx context.Context, stream server.Stream) error {
	m := new(DownloadReq)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.FileHandler.Download(ctx, m, &fileDownloadStream{stream})
}

type File_DownloadStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*DownloadResp) error
}

type fileDownloadStream struct {
	stream server.Stream
}

func (x *fileDownloadStream) Close() error {
	return x.stream.Close()
}

func (x *fileDownloadStream) Context() context.Context {
	return x.stream.Context()
}

func (x *fileDownloadStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *fileDownloadStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *fileDownloadStream) Send(m *DownloadResp) error {
	return x.stream.Send(m)
}
